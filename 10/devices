
devices
=======

* /dev/null

when writing to it, everything gets 'forgotten', deleted.

when reading, read() returns 0 bytes.

cp /dev/null empty-file


* /dev/zero

unlimited length zeroes generator.

hexdump -v /dev/zero

(without -v it squeezes similar lines).


* /dev/full

behaves like a file on a filesystem where no space left.
writing to this file ends up with an error.

cp /etc/passwd /dev/full
cat /etc/passwd > /dev/full

used to check how program will behave, in case the space is exhausted.


* /dev/random

has a buffer of user generated chaos.
stops when buffer is empty.

hexdump /dev/random


* /dev/urandom

when the buffer is exhausted, switches to pseudo random number generator.

that was linux related.

*freebsd

The FreeBSD operating system provides /dev/urandom for compatibility but the behavior is very different from that of Linux. On FreeBSD, /dev/urandom is just a link to /dev/random and only blocks until properly seeded. 


*openbsd
Since OpenBSD 5.1 (May 1, 2012) /dev/random and /dev/arandom use an algorithm based on RC4 but renamed, because of intellectual property reasons, ARC4. While random number generation here uses system entropy gathered in several ways, the ARC4 algorithm provides a fail-safe, ensuring that a rapid and high quality pseudo-random number stream is provided even when the pool is in a low entropy state.

-------------------------

     /dev/random    This device is reserved for future support of
hardware
                    random generators.

     /dev/srandom    Strong random data.  This device returns reliable random
                    data.  If sufficient entropy is not currently
available
                    (i.e., the entropy pool quality starts to run
low), the
                    driver pauses while more of such data is collected.  The
                    entropy  pool  data  is converted into output
data using MD5.

     /dev/urandom   Same as above, but does not guarantee the data to be
                    strong.   The  entropy pool data is converted
into output
                    data using MD5.  When the entropy pool quality runs low,
                    the driver will continue to output data.

     /dev/prandom   Simple pseudo-random generator.

     /dev/arandom    As  required,  entropy pool data re-seeds an
ARC4 generator,
                    which then generates high-quality pseudo-random output data.
-------------------------
from http://nixdoc.net/man-pages/openbsd/man4/arandom.4.html

* osx and ios

macOS uses 160-bit Yarrow based on SHA1.[20] There is no difference between /dev/random and /dev/urandom; both behave identically.[21] Apple's iOS also uses Yarrow.

Yarrow is a pseudo random number generator.



security concerns
=================

https://en.wikipedia.org/wiki//dev/random

https://arstechnica.com/information-technology/2013/12/we-cannot-trust-intel-and-vias-chip-based-crypto-freebsd-developers-say/

https://en.wikipedia.org/wiki/RdRand#Reception

https://news.ycombinator.com/item?id=6880474

* openbsd

In September 2013, in response to a New York Times article revealing the NSA's effort to weaken encryption, Theodore Ts'o publicly posted concerning the use of RdRand for /dev/random in the Linux kernel:[22]

>I am so glad I resisted pressure from Intel engineers to let /dev/random rely only on the RDRAND instruction. To quote from the article below: 'By this year, the Sigint Enabling Project had found ways inside some of the encryption chips that scramble information for businesses and governments, either by working with chipmakers to insert back doors....' Relying solely on the hardware random number generator which is using an implementation sealed inside a chip which is impossible to audit is a BAD idea.

Linus Torvalds dismissed concerns about the use of RdRand in the Linux kernel, and pointed out that it is not used as the only source of entropy for /dev/random, but rather used to improve the entropy by combining the values received from RdRand with other sources of randomness.[23][24] However, Taylor Hornby of Defuse Security demonstrated that the Linux random number generator could become insecure if a backdoor is introduced into the RdRand instruction that specifically targets the code using it. Taylor's proof-of-concept implementation works on an unmodified Linux kernel prior to version 3.13.[25][26][27]


* loop devices

can be created let's say with dd, can be copied from other devices/partitions.
